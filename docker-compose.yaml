version: "3.8"

volumes:
  postgres_data:

services:
  backend:
    build:
      context: ./backend  
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - POSTGRES_URL=${POSTGRES_URL}
      - POSTGRES_PRISMA_URL=${POSTGRES_PRISMA_URL}
      - POSTGRES_URL_NO_SSL=${POSTGRES_URL_NO_SSL}
      - POSTGRES_URL_NON_POOLING=${POSTGRES_URL_NON_POOLING}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      - postgres
      - redis
      - celery-worker
      - celery-beat
    ports:
      - "5001:5001"  
    restart: always

  postgres:
    image: postgres:16
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - POSTGRES_HOST=${POSTGRES_HOST}
    volumes:
      - postgres_data:/var/lib/postgresql/data 
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2
    ports:
      - 6379:6379
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A make_celery worker --loglevel=info
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      - redis
    restart: always

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A make_celery beat --loglevel=info
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      - redis
    restart: always
